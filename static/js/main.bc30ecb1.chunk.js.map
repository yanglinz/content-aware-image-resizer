{"version":3,"sources":["helpers/cache.js","worker.js","components/ImageCanvas.js","components/Controls.js","index.js","helpers/dom.js"],"names":["memoize","func","cache","args","key","JSON","stringify","Worker_fn","Worker","getOffscreenCanvas","canvasId","document","getElementById","transferControlToOffscreen","getCanvasElements","source","offscreenSource","undefined","target","detachedSource","detachedTarget","ImageCanvas","props","currentDisplay","originalClassNames","targetClassNames","className","id","Controls","handleResize","onClick","initialState","display","reducer","state","action","type","Error","fn","getWorker","_worker","postMessage","App","useReducer","dispatch","useEffect","worker","resizedWidth","width","resizedHeight","height","ReactDOM","render","readyState","addEventListener"],"mappings":"oMAAO,SAASA,EAAQC,GACtB,IAAMC,EAAQ,GACd,OAAO,WAA4B,IAAD,uBAANC,EAAM,yBAANA,EAAM,gBAChC,IAAMC,EAAMC,KAAKC,UAAUH,GAC3B,OAAIC,KAAOF,EAAcA,EAAME,GACvBF,EAAME,GAAOH,EAAI,WAAJ,EAAQE,ICLlB,SAASI,IACtB,OAAO,IAAIC,OAAO,IAA0B,uC,WCM9C,IAAMC,EAAqBT,GAL3B,SAA6BU,GAE3B,OADeC,SAASC,eAAeF,GACzBG,gCAKT,SAASC,IACd,IAAMC,EAASJ,SAASC,eAAe,iBACjCI,EAAkBD,EACpBN,EAAmB,sBACnBQ,EACEC,EAASP,SAASC,eAAe,iBAIvC,MAAO,CACLG,OAAQC,EACRG,eAAgBJ,EAChBG,OANsBA,EACpBT,EAAmB,sBACnBQ,EAKFG,eAAgBF,GAuBLG,MAnBf,SAAqBC,GACnB,IAAQC,EAAmBD,EAAnBC,eAEFC,EAAwC,WAAnBD,EAA8B,GAAK,SACxDE,EAAsC,WAAnBF,EAA8B,GAAK,SAE5D,OACE,sBAAKG,UAAU,4CAAf,UACE,qBAAKA,UAAWF,EAAhB,SACE,wBAAQG,GAAG,oBAGb,qBAAKD,UAAWD,EAAhB,SACE,wBAAQE,GAAG,wBCzBJC,MAdf,SAAkBN,GAChB,IAAQO,EAAiBP,EAAjBO,aACR,OACE,qBAAKH,UAAU,WAAf,SACE,wBACEA,UAAU,uEACVI,QAASD,EAFX,8BCOAE,G,KAAe,CAAEC,QAAS,WAEhC,SAASC,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,SACH,MAAO,CAAEJ,QAAS,UACpB,QACE,MAAM,IAAIK,MAAM,oCAetB,ICjCgCC,EDiC1BC,EAAYvC,GAXlB,WACE,IAAMwC,EAAU,IAAIhC,EACpB,EAA2BM,IAAnBC,EAAR,EAAQA,OAAQG,EAAhB,EAAgBA,OAMhB,OADAsB,EAAQC,YAAY,CAAC,OAAQ,CAAE1B,SAAQG,WAAW,CAACH,EAAQG,IACpDsB,KAKT,SAASE,IACP,MAA0BC,YAAWV,EAASF,GAA9C,mBAAOG,EAAP,KAAcU,EAAd,KA4BA,OAFAC,aAxBA,WAEiBN,IACRE,YAAY,CAAC,kBAFD,sDAuBA,IAGnB,sBAAKf,UAAU,6BAAf,UACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,2CAAf,SACE,cAAC,EAAD,CAAaH,eAAgBW,EAAMF,cAIvC,qBAAKN,UAAU,yCAAf,SACE,cAAC,EAAD,CAAUG,aA7BhB,WACE,IAAQV,EAAmBL,IAAnBK,eAEF2B,EAASP,IACTQ,EAAe5B,EAAe6B,MAAQ,EACtCC,EAAgB9B,EAAe+B,OAErCJ,EAAOL,YAAY,CACjB,oBACAtB,EAAe6B,MACf7B,EAAe+B,OACfH,EACAE,IAGFL,EAAS,CAAER,KAAM,mBC3DWE,ED+EhB,WACda,IAASC,OAAO,cAACV,EAAD,IAAS/B,SAASC,eAAe,SC/EtB,WAAvBD,SAAS0C,WACXf,IAEA3B,SAAS2C,iBAAiB,mBAAoBhB,K","file":"static/js/main.bc30ecb1.chunk.js","sourcesContent":["export function memoize(func) {\n  const cache = {};\n  return function memoized(...args) {\n    const key = JSON.stringify(args);\n    if (key in cache) return cache[key];\n    return (cache[key] = func(...args));\n  };\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/worker.327b9030.worker.js\");\n}\n","import { memoize } from \"../helpers/cache\";\n\nfunction _getOffscreenCanvas(canvasId) {\n  const canvas = document.getElementById(canvasId);\n  return canvas.transferControlToOffscreen();\n}\n\nconst getOffscreenCanvas = memoize(_getOffscreenCanvas);\n\nexport function getCanvasElements() {\n  const source = document.getElementById(\"canvas-source\");\n  const offscreenSource = source\n    ? getOffscreenCanvas(\"canvas-source\")\n    : undefined;\n  const target = document.getElementById(\"canvas-target\");\n  const offscreenTarget = target\n    ? getOffscreenCanvas(\"canvas-target\")\n    : undefined;\n  return {\n    source: offscreenSource,\n    detachedSource: source,\n    target: offscreenTarget,\n    detachedTarget: target,\n  };\n}\n\nfunction ImageCanvas(props) {\n  const { currentDisplay } = props;\n\n  const originalClassNames = currentDisplay === \"SOURCE\" ? \"\" : \"hidden\";\n  const targetClassNames = currentDisplay === \"TARGET\" ? \"\" : \"hidden\";\n\n  return (\n    <div className=\"border-8 border-gray-600 border-opacity-5\">\n      <div className={originalClassNames}>\n        <canvas id=\"canvas-source\"></canvas>\n      </div>\n\n      <div className={targetClassNames}>\n        <canvas id=\"canvas-target\"></canvas>\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCanvas;\n","function Controls(props) {\n  const { handleResize } = props;\n  return (\n    <div className=\"Controls\">\n      <button\n        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n        onClick={handleResize}\n      >\n        Resize to 50%\n      </button>\n    </div>\n  );\n}\n\nexport default Controls;\n","import React, { useReducer, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { onDocumentReady } from \"./helpers/dom\";\nimport { memoize } from \"./helpers/cache\";\nimport Worker from \"worker-loader!./worker\";\nimport ImageCanvas, { getCanvasElements } from \"./components/ImageCanvas\";\nimport Controls from \"./components/Controls\";\n\nimport \"./index.css\";\n\nconst initialState = { display: \"SOURCE\" };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"RESIZE\":\n      return { display: \"TARGET\" };\n    default:\n      throw new Error(\"Unknown action type in reducer.\");\n  }\n}\n\nfunction _getWorkerInstance() {\n  const _worker = new Worker();\n  const { source, target } = getCanvasElements();\n\n  // We can only send canvas elements once from the main thread to the worker.\n  // Once sent, the offscreen canvas are in a detached state.\n  // So we'll call this once at the start of the worker lifecycle.\n  _worker.postMessage([\"init\", { source, target }], [source, target]);\n  return _worker;\n}\n\nconst getWorker = memoize(_getWorkerInstance);\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  function loadImage() {\n    const DEMO_IMAGE = \"https://source.unsplash.com/yRjLihK35Yw/800x450\";\n    const worker = getWorker();\n    worker.postMessage([\"loadSourceImage\", DEMO_IMAGE]);\n  }\n\n  function handleResize() {\n    const { detachedSource } = getCanvasElements();\n\n    const worker = getWorker();\n    const resizedWidth = detachedSource.width - 2;\n    const resizedHeight = detachedSource.height;\n\n    worker.postMessage([\n      \"resizeTargetImage\",\n      detachedSource.width,\n      detachedSource.height,\n      resizedWidth,\n      resizedHeight,\n    ]);\n\n    dispatch({ type: \"RESIZE\" });\n  }\n\n  useEffect(loadImage, []);\n\n  return (\n    <div className=\"App flex flex-col h-screen\">\n      <div className=\"flex-grow\">\n        <div className=\"flex items-center\tjustify-center h-full\">\n          <ImageCanvas currentDisplay={state.display} />\n        </div>\n      </div>\n\n      <div className=\"border-t border-gray-150 p-10 bg-white\">\n        <Controls handleResize={handleResize} />\n      </div>\n    </div>\n  );\n}\n\nonDocumentReady(() => {\n  ReactDOM.render(<App />, document.getElementById(\"app\"));\n});\n\nif (module.hot) {\n  // Disable HMR in development\n  module.hot.decline();\n}\n","export function onDocumentReady(fn) {\n  if (document.readyState != \"loading\") {\n    fn();\n  } else {\n    document.addEventListener(\"DOMContentLoaded\", fn);\n  }\n}\n"],"sourceRoot":""}